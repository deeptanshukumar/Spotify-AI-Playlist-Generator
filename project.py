import tkinter
import webbrowser
import google.generativeai as genai
import spotipy
from spotipy.oauth2 import SpotifyOAuth
from ytmusicapi import YTMusic
import os
from dotenv import load_dotenv

load_dotenv('key.env') #MAKE A key.env FILE WITH YOUR SPOTIFY_CLIENT_ID, SPOTIFY_CLIENT_SECRET, GOOGLE_API_KEY BEFORE USING

# I initially started out making this as a way for users to enter query and have gemini list out a bunch of parameters 
# to input into the Spotify API and get recommendations. however since spotify api's get recommendations is decapricated
# I decided to take the parameters, make a long query and pass it to the ytmusic api to get songs and then search for them
# on spotify to get the uris (links of the songs) and create a playlist.

SPOTIFY_CLIENT_ID = os.getenv('SPOTIFY_CLIENT_ID')
SPOTIFY_CLIENT_SECRET = os.getenv('SPOTIFY_CLIENT_SECRET')
GOOGLE_API_KEY = os.getenv('GOOGLE_API_KEY')
genai.configure(api_key=GOOGLE_API_KEY)

REDIRECT_URI = "http://localhost:8888/callback"
sp_oauth = SpotifyOAuth(
    client_id=SPOTIFY_CLIENT_ID,
    client_secret=SPOTIFY_CLIENT_SECRET,
    redirect_uri=REDIRECT_URI,
    scope="playlist-modify-public"
)
sp = spotipy.Spotify(auth_manager=sp_oauth)
ytmusic = YTMusic()



def main():
    # main tkinter logic which calls the generate_playlist function on the button click
    def submit():
        query = entry.get()
        generate_playlist(query)
    

    window = tkinter.Tk()
    window.title("Spotify AI Playlist Generator ðŸŽµ")
    window.geometry("1100x660")
    window.resizable(width=False, height=False) 
    window.configure(bg='#191414')
    icon = tkinter.PhotoImage(file="logo.png")
    window.iconphoto(True, icon)
    frame = tkinter.Frame(window, bg='#ffffff')

    label = tkinter.Label(window, text="ðŸŽ§ Spotify AI Playlist Generator ðŸŽµ", font=("sans-serif", 40), bg='#191414', fg='#1DB954')
    label.pack(pady=70, padx=10)


    entry = tkinter.Entry(frame, font=("sans-serif", 20), width=50, borderwidth=0)
    button = tkinter.Button(frame, text="Generate Playlist", font=("sans-serif", 20), bg='#1DB954', fg='#ffffff', borderwidth=0, padx=10, pady=10, command=submit)
    button.pack(side=tkinter.RIGHT)
    entry.pack(side=tkinter.LEFT)
    frame.pack(pady=200)
    window.mainloop()




def generate_yt_query(predicted_values):
    #generating a quey for youtube music based on the predicted values
    tempo, energy, danceability, valence, acousticness, instrumentalness, liveness, num_songs = predicted_values  

    query = "english"
    query += " high energy" if float(energy) > 0.5 else " chill"
    query += " dance" if float(danceability) > 0.5 else " relaxed"
    query += " happy" if float(valence) > 0.5 else " sad"
    query += " acoustic" if float(acousticness) > 0.5 else " electronic"
    query += " instrumental" if float(instrumentalness) > 0.5 else " with vocals"
    query += " live" if float(liveness) > 0.5 else " studio"

    return query, int(num_songs)

def get_yt_songs(predicted_values):
    #getting songs from yt beased on the query generated by generate_yt_query
    query, num_songs = generate_yt_query(predicted_values)
    search_results = ytmusic.search(query, filter="songs")[:num_songs]
    return [{"title": song["title"], "artist": song["artists"][0]["name"]} for song in search_results]

def get_spotify_uris(songs):
    # searching for the songs on spotify and getting their uris
    uris = []
    for song in songs:
        query = f"{song['title']} {song['artist']}"
        if len(query) > 250: #this is to limit search query for spotify
            query = query[:250]

        result = sp.search(q=query, type="track", limit=1)
        if result["tracks"]["items"]:
            uris.append(result["tracks"]["items"][0]["uri"])
    return uris

def generate_playlist(query):
    try:
        prompt = f"""Given this query: {query}, recommend the following parameters for Spotify recommendations:
        - target_tempo: 0 to 250 BPM
        - target_energy: 0 (low) to 1 (high)
        - target_danceability: 0 (least) to 1 (most)
        - target_valence: 0 (sad) to 1 (happy)
        - target_acousticness: 0 (electronic) to 1 (acoustic)
        - target_instrumentalness: 0 (vocals) to 1 (instrumental)
        - target_liveness: 0 (studio) to 1 (live)
        - number of songs (default is 20 but can vary based on user request)
        Return a simple string of numbers separated by commas, e.g., "120, 0.8, 0.9, 0.6, 0.2, 0.0, 0.3, 20"
        IF NOTHING IN QUERY, JUST PROVIDE RANDOM VALUES!
        DONT NOT TYPE ANYTHING ELSE APART FROM THE NUMBERS AND COMMAS!
        """

        model = genai.GenerativeModel('gemini-pro') 
        response = model.generate_content(prompt)
        predicted_values = response.text.strip().split(", ") #getting list of pred. values

        yt_songs = get_yt_songs(predicted_values)
        spotify_uris = get_spotify_uris(yt_songs)

        if not spotify_uris:
            print("No valid songs found for playlist.")
            return

        #generating playlist title
        playlist_title = model.generate_content(f"Generate a succinct name for the playlist: {query}").text.strip()
        user_id = sp.current_user()['id']
        playlist = sp.user_playlist_create(user_id, playlist_title, public=True)

        #adding songs to playlist
        sp.playlist_add_items(playlist['id'], spotify_uris)

        #html code adding the playlist to the web page
        playlist_embed_url = f"https://open.spotify.com/embed/playlist/{playlist['id']}"
        html_content = f"""
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Spotify Playlist</title>
</head>
<body>
    
    <iframe style="border-radius:12px" src="{playlist_embed_url}" width="100%" height="352" frameBorder="0" allowfullscreen="" allow="autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture" loading="lazy"></iframe>
</body>
</html>
"""
        with open("embed.html", "w") as file:
            file.write(html_content)

        print("Playlist created successfully!")
        webbrowser.open_new_tab("embed.html")

    except Exception as e:
        print(f"An error occurred: {e}")
        raise
  


main()
